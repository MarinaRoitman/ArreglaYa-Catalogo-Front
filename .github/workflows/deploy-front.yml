name: Deploy Frontend to EC2

on:
  push:
    branches: [ "main", "master" ]
  workflow_dispatch: {}

concurrency:
  group: deploy-front
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps
        run: |
          # usa ci si hay lockfile, si no, install
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build frontend
        run: |
          # soporta Vite (dist) y CRA (build)
          if npm run | grep -q " build"; then
            npm run build
          else
            echo "No build script found in package.json" && exit 1
          fi
          # Detecta carpeta de salida
          if [ -d "dist" ]; then
            echo "BUILD_DIR=dist" >> $GITHUB_ENV
          elif [ -d "build" ]; then
            echo "BUILD_DIR=build" >> $GITHUB_ENV
          else
            echo "No dist/ or build/ directory found after build" && exit 1
          fi

      - name: Copy static assets to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "${{ env.BUILD_DIR }}/*"
          target: "${{ secrets.EC2_PATH }}/dist"
          strip_components: 0
          overwrite: true
          rm: true

      - name: Post-deploy steps on EC2 (ensure dir & restart caddy)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            # asegurar estructura final (sirviendo /srv/frontend desde Caddy)
            BASE_DIR="$(dirname '${{ secrets.EC2_PATH }}')"   # /home/ubuntu/catalogo
            FRONT_DIR='${{ secrets.EC2_PATH }}'               # /home/ubuntu/catalogo/frontend
            sudo mkdir -p "${FRONT_DIR}/dist"
            # limpiar posibles CRLF no hace falta para estáticos, pero dejamos por si suben html editado
            find "${FRONT_DIR}/dist" -type f -name '*.html' -exec sed -i 's/\r$//' {} \; || true
            # reiniciar caddy para refrescar índices/etags
            cd "${BASE_DIR}"
            docker compose ps
            docker compose restart caddy
