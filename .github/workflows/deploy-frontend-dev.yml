name: Deploy Frontend to EC2 (dev)

on:
  push:
    branches: [ "dev" ]
    paths:
      - "desarrollo2-catalogos-front/**"
  workflow_dispatch: {}

concurrency:
  group: deploy-front-dev
  cancel-in-progress: true

jobs:
  build-and-deploy-dev:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: desarrollo2-catalogos-front

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: desarrollo2-catalogos-front/package-lock.json

      - name: Install deps
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi

      # Vars de build para CRA (se leen en build-time)
      - name: Build (DEV)
        env:
          REACT_APP_API_URL: "https://apidev.desarrollo2-catalogos.online"
        run: |
          set -euo pipefail
          echo "🔧 REACT_APP_API_URL=$REACT_APP_API_URL"
          npm run build
          if [ -d "dist" ]; then
            echo "BUILD_DIR=dist" >> "$GITHUB_ENV"
          elif [ -d "build" ]; then
            echo "BUILD_DIR=build" >> "$GITHUB_ENV"
          else
            echo "❌ No dist/ or build/ directory found"; exit 1
          fi
          echo "✅ Build listo en $BUILD_DIR"

      - name: Quick check: API URL baked into bundle
        run: |
          set -euo pipefail
          echo "BUILD_DIR=${{ env.BUILD_DIR }}"
          grep -R --include='*.js' -n 'https://apidev.desarrollo2-catalogos.online' "${{ env.BUILD_DIR }}" | head -n 3 || echo "⚠️ No se detectó la URL dev en los JS (puede estar ofuscada)"

      # ——— Deploy al EC2 ———

      - name: Ensure target dir on EC2 (DEV)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ci
          password: ${{ secrets.EC2_SSH_PASSWORD }}
          script: |
            set -euo pipefail
            sudo mkdir -p /home/ubuntu/catalogo/frontend-dev/dist
            sudo chown -R ci:ci /home/ubuntu/catalogo/frontend-dev

      - name: Copy static assets to EC2 (DEV)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ci
          password: ${{ secrets.EC2_SSH_PASSWORD }}
          source: "desarrollo2-catalogos-front/${{ env.BUILD_DIR }}/**"
          target: "/home/ubuntu/catalogo/frontend-dev/dist"
          strip_components: 2
          overwrite: true
          rm: true
          timeout: 2m

      - name: Bring up Caddy (DEV)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ci
          password: ${{ secrets.EC2_SSH_PASSWORD }}
          script: |
            set -euo pipefail
            cd /home/ubuntu/catalogo
            # Levanta (o recrea) solo caddy usando el .env del server
            sudo docker compose --env-file /home/ubuntu/catalogo/.env -f docker-compose.yml up -d caddy

            # Espera a que quede running
            for i in {1..20}; do
              state=$(sudo docker inspect -f '{{.State.Running}}' caddy 2>/dev/null || echo "false")
              [ "$state" = "true" ] && break
              sleep 1
            done

            echo "Estado de servicios:"
            sudo docker compose --env-file /home/ubuntu/catalogo/.env -f docker-compose.yml ps

      - name: Verify files and serve path in container (DEV)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ci
          password: ${{ secrets.EC2_SSH_PASSWORD }}
          script: |
            set -euo pipefail
            echo "== /home/ubuntu/catalogo/frontend-dev/dist =="
            ls -lah /home/ubuntu/catalogo/frontend-dev/dist | head -n 50

            cd /home/ubuntu/catalogo
            if ! sudo docker inspect -f '{{.State.Running}}' caddy 2>/dev/null | grep -q true; then
              echo "❌ caddy no está corriendo"
              sudo docker compose --env-file /home/ubuntu/catalogo/.env -f docker-compose.yml ps || true
              echo "Logs de caddy:"
              sudo docker logs --tail 200 caddy || true
              exit 1
            fi

            echo "== /srv/frontend-dev dentro de caddy =="
            sudo docker compose --env-file /home/ubuntu/catalogo/.env -f docker-compose.yml exec -T caddy sh -lc 'ls -lah /srv/frontend-dev | head -n 50'

            echo "== Healthcheck simple (HTTP) =="
            # Si tenés HTTPS obligatorio o dominio con TLS, podés cambiarlo por curl -Iks https://apidev.desarrollo2-catalogos.online
            sudo docker compose -f docker-compose.yml exec -T caddy sh -lc 'apk add --no-cache curl >/dev/null 2>&1 || true; curl -I -s http://localhost | head -n 5 || true'
