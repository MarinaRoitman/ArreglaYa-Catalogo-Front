name: Deploy Frontend to EC2 (dev)

on:
  push:
    branches: [ "dev" ]
    paths:
      - 'desarrollo2-catalogos-front/**'
  workflow_dispatch: {}

concurrency:
  group: deploy-front-dev
  cancel-in-progress: true

jobs:
  build-and-deploy-dev:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: desarrollo2-catalogos-front

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: desarrollo2-catalogos-front/package-lock.json

      - name: Install deps
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi

      - name: Debug React environment variables
        run: |
          echo "üîé REACT_APP_* variables disponibles:"
          printenv | grep '^REACT_APP_' || echo "‚ö†Ô∏è No REACT_APP_* vars found"

      - name: Build (DEV)
        env:
          REACT_APP_API_URL: "https://apidev.desarrollo2-catalogos.online"
        run: |
          echo "üîß REACT_APP_API_URL=$REACT_APP_API_URL"
          npm run build
          if [ -d "dist" ]; then
            echo "BUILD_DIR=dist" >> $GITHUB_ENV
          elif [ -d "build" ]; then
            echo "BUILD_DIR=build" >> $GITHUB_ENV
          else
            echo "No dist/ or build/ directory found" && exit 1
          fi

      - name: Verify API URL baked in bundle
        run: |
          echo "BUILD_DIR=${{ env.BUILD_DIR }}"
          echo "¬øapidev est√° en el bundle? (OK si aparece)"
          grep -R --include='*.js' -n 'https://apidev.desarrollo2-catalogos.online' "${{ env.BUILD_DIR }}" | head -n 5 || echo "‚ö†Ô∏è No dev URL found"
          echo "¬øapi prod aparece? (NO deber√≠a aparecer)"
          grep -R --include='*.js' -n 'https://api.desarrollo2-catalogos.online' "${{ env.BUILD_DIR }}" | head -n 5 || true

      # ‚ö†Ô∏è Mejor evitar imprimir secretos en logs
      # - name: Debug secrets (masked) ...

      - name: Ensure target dir (DEV)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ci
          password: ${{ secrets.EC2_SSH_PASSWORD }}
          script: |
            set -e
            sudo mkdir -p /home/ubuntu/catalogo/frontend-dev/dist
            sudo chown -R ci:ci /home/ubuntu/catalogo/frontend-dev

      - name: Copy static assets to EC2 (DEV)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ci
          password: ${{ secrets.EC2_SSH_PASSWORD }}
          source: "desarrollo2-catalogos-front/${{ env.BUILD_DIR }}/**"
          target: "/home/ubuntu/catalogo/frontend-dev/dist"
          strip_components: 2
          overwrite: true
          rm: true
          timeout: 2m

      - name: Restart Caddy (DEV)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ci
          password: ${{ secrets.EC2_SSH_PASSWORD }}
          script: |
            set -e
            sudo docker compose -f /home/ubuntu/catalogo/docker-compose.yml restart caddy
            for i in {1..15}; do
              sudo docker ps --filter "name=caddy" --format '{{.Names}}' | grep -q '^caddy$' && break
              sleep 1
            done

      - name: Verify files in caddy (DEV)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ci
          password: ${{ secrets.EC2_SSH_PASSWORD }}
          script: |
            set -e
            echo "== /home/ubuntu/catalogo/frontend-dev/dist =="
            ls -lah /home/ubuntu/catalogo/frontend-dev/dist | head -n 50
            echo "== /srv/frontend-dev inside caddy =="
            sudo docker compose -f /home/ubuntu/catalogo/docker-compose.yml exec -T caddy sh -lc 'ls -lah /srv/frontend-dev | head -n 50'
